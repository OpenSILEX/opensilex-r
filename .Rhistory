use_mit_license()
usethis::use_mit_license()
usethis::use_package('httr')
usethis::use_package('jsonlite')
usethis::use_build_ignore("devtools_history.R")
usethis::use_package('dplyr')                     # Use dplyr package
usethis::use_pipe(export = TRUE)                  # Use magrittr pipe
usethis::use_testthat()
devtools::test()
usethis::use_package('rlang')                     # Use rlang package
phis_public_test <- list(
host = "http://opensilex.org:8084/rest",
user = "admin@opensilex.org",
password = "admin",
experiment_uri = "http://www.phenome-fppn.fr/m3p/ARCH2017-03-30",
scientific_object_type = "vocabulary:Plant"
)
configuration <- list(
host = "http://opensilex.org:8084/rest",
user = "admin@opensilex.org",
password = "admin",
experiment_uri = "http://www.phenome-fppn.fr/m3p/ARCH2017-03-30",
scientific_object_type = "vocabulary:Plant"
)
opensilexR::get_scientific_object_modalities(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type)
)
library(opensilexR)
library(opensilexR)
opensilexR::get_scientific_object_modalities(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type)
)
opensilexR::get_data(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type
)
opensilexR::get_data(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type
)
library(opensilexR)
opensilexR::get_data(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type
)
configuration <- list(
host = "http://opensilex.org:8084/rest",
user = "admin@opensilex.org",
password = "admin",
experiment_uri = "http://www.phenome-fppn.fr/m3p/ARCH2017-03-30",
scientific_object_type = "vocabulary:Plant"
)
attach(configuration)
token <- opensilexR::get_token(
host = host,
user = user,
password = password
)
call1 <- paste0(host, "/core/scientific_objects/export")
post_result <-
httr::POST(
call1,
body = paste0(
'{
"experiment": "', experiment_uri, '",
"factor_levels": [],
"name": "",
"order_by": ["name=asc"],
"rdf_types": ["', scientific_object_type, '"]
}'
),
httr::add_headers(
Authorization = token,
`Content-Type` = "application/json"
)
)
class(post_result)
usethis::use_package('logging')
library(opensilexR)
opensilex::parse_status
opensilexR::parse_status
library(opensilexR)
library(opensilexR)
configuration <- list(
host = "http://opensilex.org:8084/rest",
user = "admin@opensilex.org",
password = "admin",
experiment_uri = "http://www.phenome-fppn.fr/m3p/ARCH2017-03-30",
scientific_object_type = "vocabulary:Plant"
)
os_modalities <- opensilexR::get_scientific_object_modalities(
host = configuration$host,
user = configuration$user,
password = configuration$password,
experiment_uri = configuration$experiment_uri,
scientific_object_type = configuration$scientific_object_type
)
os_modalities
View(os_modalities)
